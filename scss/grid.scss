@import "grid-math.scss";

@mixin clearfix() {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-min($min) {
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Create a column by specifying colspan, grid column width, gutter width.
//
// - `$colspan`: the colspan of the column.
// - `$column`: a single column width.
// - `$gutter`: gutter width
// - `$breakpoint`: a keyword for the breakpoint
// - `$ns`: an optional namespace for grid classes.
@mixin col($span, $column, $gutter, $breakpoint, $ns: '') {
  .#{$ns}col-#{$breakpoint}-#{$span} {
    float: left;
    margin-left: ($gutter / 2);
    margin-right: ($gutter / 2);
    width: colspan($span, $column, $gutter);
  }
}

@mixin row($gutter, $ns: '') {
  .#{$ns}row {
    @include clearfix;
    margin-left: -1 * ($gutter / 2);
    margin-right: -1 * ($gutter / 2);
  }
}

@mixin container($span, $column, $gutter, $ns: '') {
  .#{$ns}container {
    width: colspan($span, $column, $gutter);
    margin-left: auto;
    margin-right: auto;
  }
}

// Acts like a container, but does not have a width specified. Use this for
// base style at lowest breakpoint.
@mixin wrapper($gutter, $ns: '') {
  .#{$ns}row {
    margin-left: $gutter;
    margin-right: $gutter;
  }
}

@mixin debug($ns: '') {
  // Debug causes columns to be rendered with a semi-transparent red background
  // assisting in layout debugging.
  .#{$ns}debug [class*="#{$ns}col"] {
    background-color: rgba(255, 120, 0, 0.3);
    box-shadow: inset 0 0 0 1px rgba(255, 120, 0, 0.3);
  }
}

// Generate a grid breakpoint
@mixin grid($columns, $column, $gutter, $breakpoints, $ns: '') {
  $width: colspan($columns, $column, $gutter);
  @include media-breakpoint-min($width) {
    @include container($columns, $column, $gutter, $ns);
    @include row($gutter, $ns);
    @each $breakpoint in $breakpoints {
      @for $span from 1 through $columns {
        @include col($span, $column, $gutter, $breakpoint, $ns);
      }
    }
  }
}

@mixin grid-system($columns, $column-sm, $column-md, $column-lg, $column-xl, $gutter, $ns: '') {
  @include debug($ns);
  @include wrapper($gutter, $ns);
  @include grid(12, $column-sm, $gutter, ('sm'), $ns);
  @include grid(12, $column-md, $gutter, ('sm', 'md'), $ns);
  @include grid(12, $column-lg, $gutter, ('sm', 'md', 'lg'), $ns);
  @include grid(12, $column-xl, $gutter, ('sm', 'md', 'lg', 'xl'), $ns);
}

@mixin fit-grid-system($columns, $width-sm, $width-md, $width-lg, $width-xl, $gutter, $unit: 1, $ns: '') {
  $gutter: fit-gutter($gutter, $unit);
  $column-sm: fit-col($columns, $width-sm, $gutter, $unit);
  $column-md: fit-col($columns, $width-md, $gutter, $unit);
  $column-lg: fit-col($columns, $width-lg, $gutter, $unit);
  $column-xl: fit-col($columns, $width-lg, $gutter, $unit);
  @include debug($ns);
  @include wrapper($gutter, $ns);
  @include grid-system(12, $column-sm, $gutter, ('sm'), $ns);
  @include grid-system(12, $column-md, $gutter, ('sm', 'md'), $ns);
  @include grid-system(12, $column-lg, $gutter, ('sm', 'md', 'lg'), $ns);
  @include grid-system(12, $column-xl, $gutter, ('sm', 'md', 'lg', 'xl'), $ns);
}